---
interface Props {
  title: string;
  subtitle: string;
  videoSrc?: string;
  imageSrc?: string;
  showCTA?: boolean;
}

const {
  title,
  subtitle,
  videoSrc,
  imageSrc = "/images/hero-background.jpg",
  showCTA = true,
} = Astro.props;
---

<section class="relative min-h-screen overflow-hidden">
  <!-- Split Layout Container -->
  <div class="flex flex-col lg:flex-row min-h-screen">
    <!-- Left Content Area (45% on desktop, full width on mobile) -->
    <div
      class="relative w-full lg:w-[45%] flex items-center justify-center bg-white min-h-[50vh] lg:min-h-screen"
    >
      <div
        class="relative z-20 px-6 md:px-8 lg:px-12 w-full max-w-xl text-center lg:text-center mx-auto"
      >
        <!-- Main Title -->
        <h1
          class="main-title text-6xl sm:text-7xl md:text-8xl lg:text-9xl xl:text-12xl 2xl:text-16xl font-black text-gray-900 leading-tight md:leading-[0.85] tracking-tight mb-4"
        >
          <span
            class="block lg:translate-y-2 xl:translate-y-3 2xl:translate-y-4"
            >AERIAL</span
          >
          <span
            class="block lg:translate-y-5 xl:translate-y-7 2xl:translate-y-10"
            >STORY</span
          >
          <span
            class="block relative z-30 lg:translate-y-8 xl:translate-y-12 2xl:translate-y-16"
            >TELLING</span
          >
        </h1>
      </div>
    </div>

    <!-- Right Media Area (55% on desktop, full width on mobile) -->
    <div class="relative w-full lg:w-[55%] min-h-[50vh] lg:min-h-screen">
      <!-- Background Video -->
      {
        videoSrc && (
          <video
            autoplay
            muted
            loop
            playsinline
            class="absolute inset-0 w-full h-full object-cover hero-video"
            poster={imageSrc}
          >
            <source src={videoSrc} type="video/mp4" />
            <source src={videoSrc} type="video/webm" />
            Your browser does not support the video tag.
          </video>
        )
      }

      <!-- Background Image Fallback -->
      {
        !videoSrc && (
          <div
            class="absolute inset-0 bg-cover bg-center bg-no-repeat"
            style={`background-image: url('${imageSrc}')`}
          />
        )
      }
    </div>
  </div>

  <!-- Overlapping Subtitle Box -->
  <div
    class="absolute inset-0 flex items-center lg:items-end justify-start pointer-events-none"
  >
    <div
      class="subtitle-box relative w-5/6 max-w-lg lg:w-[50%] lg:max-w-none h-auto lg:h-[43%] rounded-r-[15px] bg-gray-200 flex items-center justify-center shadow-2xl pointer-events-auto"
    >
      <div class="text-center px-6 md:px-8 py-8 md:py-12 max-w-xl">
        <!-- Subtitle -->
        <p
          class="text-lg md:text-xl lg:text-xl xl:text-3xl text-gray-600 font-normal leading-loose mb-6 md:mb-8"
        >
          Professional drone videography that captures your vision from above.
          Creating cinematic footage for real estate, weddings, and business.
        </p>

        {
          showCTA && (
            <div class="flex flex-row gap-3 md:gap-4 w-full">
              <a
                href="/contact"
                class="bg-white text-primary-600 font-semibold py-2 px-4 md:px-6 text-sm md:text-base rounded-lg hover:bg-gray-100 transition-colors duration-200 flex-1"
              >
                Start Your Project
              </a>
              <a
                href="/portfolio"
                class="border border-white text-white font-semibold py-2 px-4 md:px-6 text-sm md:text-base rounded-lg hover:bg-white/10 transition-colors duration-200 flex-1"
              >
                View Portfolio
              </a>
            </div>
          )
        }
      </div>
    </div>
  </div>

  <!-- Scroll indicator -->
  <div
    class="absolute bottom-8 left-1/2 transform -translate-x-1/2 cursor-pointer scroll-indicator z-30"
  >
    <div
      class="flex flex-col items-center text-gray-600 hover:text-gray-900 transition-colors duration-300"
    >
      <div class="w-px h-12 bg-gray-400 mb-2"></div>
      <span class="text-xs font-light tracking-widest">SCROLL</span>
    </div>
  </div>
</section>

<script>
  // Smooth scroll on scroll indicator click
  document.addEventListener("DOMContentLoaded", () => {
    const scrollIndicator = document.querySelector(".scroll-indicator");
    if (scrollIndicator) {
      scrollIndicator.addEventListener("click", () => {
        window.scrollTo({
          top: window.innerHeight,
          behavior: "smooth",
        });
      });
    }

    // Hero animations
    const video = document.querySelector(".hero-video") as HTMLVideoElement;
    const mainTitle = document.querySelector(".main-title") as HTMLElement;
    const subtitleBox = document.querySelector(".subtitle-box") as HTMLElement;

    // Video slide-in from right to left
    if (video) {
      video.style.transform = "translateX(100%)";
      video.style.transition = "transform 1s ease-out";
      
      setTimeout(() => {
        video.style.transform = "translateX(0)";
      }, 200);
    }

    // Main title slide up animation
    if (mainTitle) {
      mainTitle.style.transform = "translateY(50px)";
      mainTitle.style.opacity = "0";
      mainTitle.style.transition = "transform 1s ease-out, opacity 1s ease-out";
      
      setTimeout(() => {
        mainTitle.style.transform = "translateY(0)";
        mainTitle.style.opacity = "1";
      }, 300);
    }

    // Subtitle box slide-in from left to right
    if (subtitleBox) {
      subtitleBox.style.transform = "translateX(-100%)";
      subtitleBox.style.transition = "transform 1s ease-out";
      
      setTimeout(() => {
        subtitleBox.style.transform = "translateX(0)";
      }, 400);
    }

    // Fade in animations
    const observerOptions = {
      threshold: 0.1,
      rootMargin: "0px 0px -50px 0px",
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add("animate-fade-in-up");
        }
      });
    }, observerOptions);

    // Observe all sections for animation
    document
      .querySelectorAll("section:not(:first-child)")
      .forEach((section) => {
        observer.observe(section);
      });
  });
</script>

<style>
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fade-in-up {
    animation: fadeInUp 0.8s ease-out forwards;
  }

  section:not(:first-child) {
    opacity: 0;
  }

  section:first-child {
    opacity: 1;
  }

  /* Hero animations */
  .hero-video {
    transform: translateX(100%);
    transition: transform 1s ease-out;
  }
  
  .main-title {
    transform: translateY(50px);
    opacity: 0;
    transition: transform 1s ease-out, opacity 1s ease-out;
  }
  
  .subtitle-box {
    transform: translateX(-100%);
    transition: transform 1s ease-out;
  }
</style>
